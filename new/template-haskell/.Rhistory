m1 = matrix(c(1, 2, 3, 4, 5, 6), nrow = 2)
print("Matrix-1:")
print(m1)
m2 = matrix(c(0, 1, 2, 3, 0, 2), nrow = 2)
print("Matrix-2:")
print(m2)
result = m1 + m2
print("Result of addition")
print(result)
result = m1 - m2
print("Result of subtraction")
print(result)
result = m1 * m2
print("Result of multiplication")
print(result)
result = m1 / m2
print("Result of division:")
print(result)
d = data.frame(x1=rnorm(5),
 x2=rnorm(5),
 x3=rnorm(5))
print("Original dataframe:")
print(d)
result = cor(d)
print("Correlation matrix:")
print(result)
df = data.frame(Ints=integer(),
 Doubles=double(),
 Characters=character(),
 Logicals=logical(),
 Factors=factor(),
 stringsAsFactors=FALSE)
print("Structure of the empty dataframe:")
print(str(df))
df_90 = data.frame(
 "item" = c("item1", "item2", "item3"),
 "Jan_sale" = c(12, 14, 12),
 "Feb_sale" = c(11, 12, 15),
 "Mar_sale" = c(12, 14, 15)
)
df_91 = data.frame(
 "item" = c("item1", "item2", "item3"),
 "Jan_sale" = c(12, 14, 12),
 "Feb_sale" = c(11, 12, 15),
 "Mar_sale" = c(12, 15, 18)
)
print("Original Dataframes:")
print(df_90)
print(df_91)
print("Row(s) in first data frame that are not present in second data frame:")
print(setdiff(df_90,df_91))
exam_data = data.frame(
name = c('Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura',
'Kevin', 'Jonas'),
score = c(12.5, 9, 16.5, 12, 9, 20, 14.5, 13.5, 8, 19),
attempts = c(1, NA, 2, NA, 2, NA, 1, NA, 2, 1),
qualify = c('yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes')
)
print("Original dataframe:")
print(exam_data)
print("The number of NA values in attempts column:")
print(sum(is.na(exam_data$attempts)))
q()
demographics <- data.frame(
  id = c("P1", "P2", "P3"),
  age = c(40, 54, 47),
  country = c("GER", "JPN", "BRA"),
  stringsAsFactors = FALSE
)
adverse_events <- data.frame(
  id = c("P1", "P1", "P3", "P4"),
  term = c("Headache", "Neutropenia", "Constipation", "Tachycardia"),
  onset_date = c("2020-12-03", "2021-01-03", "2020-11-29", "2021-01-27"),
  stringsAsFactors = FALSE
)
merge(
  x = demographics,
  y = adverse_events,
  by = "id"
)
merge(
  x = demographics,
  y = adverse_events,
  by = "id",
  all.x = TRUE
)
merge(
  x = demographics,
  y = adverse_events,
  by = "id",
  all.y = TRUE
)
q()
